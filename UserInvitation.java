package supergomokutest;

/*
 * Team SprGmkft
 * MatchMaking
 * ClientMain
 * CSCE320 Spring
 * 4-25-12
 * Java 7 with the most recent Java Compiler
 * Java API documentation, Dr. Hauser
 * Revision #3: Added methods for dealing with accepting and denying an 
 * invitation. Accepting an invite with create a ServerSocket on the default 
 * port of 4446. Denying an invite will send a "denied" message to the server
 * indicating invite denied and a pop up box will show to the other user saying
 * their invite was denied.
 *
 */

/**
 * UserInvitation class that is responsible for the UserInvitation view.
 */
public class UserInvitation extends javax.swing.JFrame {
    private ClientModel model;

    /**
     * Constructor for the UserInvitation class.
     * Creates new form UserInvitation 
     */
    public UserInvitation() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        acceptbutton = new java.awt.Button();
        denyButton = new java.awt.Button();
        invitationTA = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        acceptbutton.setLabel("Accept");
        acceptbutton.setName(""); // NOI18N
        acceptbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        denyButton.setLabel("Deny");
        denyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Invitation!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invitationTA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(acceptbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(116, 116, 116)
                                .addComponent(denyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(invitationTA, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(denyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acceptbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Action handler that is responsible for the deny button.
     * @param evt the event that the deny button is clicked.
     */
    private void denyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyButtonActionPerformed
        this.setVisible(false);
        this.reset();
        this.model.sendMessage("deny\n");
        this.model.matchController.view.resetWarning();
    }//GEN-LAST:event_denyButtonActionPerformed
    /**
     * Action handler that is responsible for the accept button.
     * @param evt the event that the accept button is clicked.
     */
    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        this.model.gameStartServerForClient();
        this.setVisible(false);
        this.reset();
        this.model.sendMessage("accept\n");
    }//GEN-LAST:event_acceptButtonActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button acceptbutton;
    private java.awt.Button denyButton;
    private javax.swing.JTextField invitationTA;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Posts the "You have been Invited" message to the TextArea in the view.
     * @param username The name of the user who sent the invitation.
     */
    public void postInvitation(String username){
        invitationTA.setText(username + " wants to play a game of Gomoku with "
                + "you!!");
    }
    /**
     * Sets the Model for this invitation.
     * @param model The Client Model for this invitation.
     */
    public void setModel(ClientModel model){
        this.model = model;
    }
    /**
     * Resets and clears the message in the TextArea of the view.
     */
    public void reset(){
        invitationTA.setText("");
    }

}
