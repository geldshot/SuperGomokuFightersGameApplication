package supergomokutest;

/*
 * Team SprGmkft
 * MatchMaking
 * ClientMain
 * CSCE320 Spring
 * 4-25-12
 * Java 7 with the most recent Java Compiler
 * Java API documentation, Dr. Hauser
 * Revision #3: Nothing major was added for this deliverable 
 * except the error message handling method.
 */


import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 * Initial view for logging into Super Gomoku Fighters. USer can either log in 
 * with their username and password, register a new account on the server, or 
 * play offline with an AI.
 * @author Austin Williams
 */
public class LoginView extends javax.swing.JPanel {
    private LoginController controller;
    private JFrame frame;

    /**
     * Creates new form LoginView
     */
    public LoginView() {
        initComponents();
        warningMessage.setVisible(false);
        connectionWarning.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();
        offlineButton = new javax.swing.JButton();
        passwordInput = new javax.swing.JPasswordField();
        warningMessage = new javax.swing.JLabel();
        connectionWarning = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.orange, java.awt.Color.blue));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SUPER GOMOKU FIGHTERS");

        jLabel2.setText("Username");

        usernameInput.setText("Enter Username");

        jLabel3.setText("Password");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        registerButton.setText("Register a New User");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        offlineButton.setText("Play Offline");
        offlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offlineButtonActionPerformed(evt);
            }
        });

        warningMessage.setForeground(new java.awt.Color(200, 0, 0));
        warningMessage.setText("Invalid Login. Please try again.");

        connectionWarning.setForeground(new java.awt.Color(200, 0, 0));
        connectionWarning.setText("Not Connected to the Server.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(loginButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameInput, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(passwordInput))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 60, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(offlineButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(registerButton)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectionWarning)
                    .addComponent(warningMessage))
                .addGap(110, 110, 110))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(warningMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginButton)
                .addGap(18, 18, 18)
                .addComponent(connectionWarning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerButton)
                    .addComponent(offlineButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sends the username and password to be validated on the Server. If correct
     * information is entered the user is then taken to the MatchMaking View. If
     * incorrect a message is displayed to the user that they have entered 
     * incorrect information. A connection check is also performed at this stage
     * to determine whether the user is connected to the server.
     * @param evt The event of the login button being clicked.
     */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        if(controller.getConnectionCheck() == true){
            
                this.controller.login("U:" + this.getUsername() + ":" + 
                    new String(this.getPassword()) + "\n");
                this.controller.setState(1);
        }
        else{
            connectionWarning.setVisible(true);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    /**
     * Takes the user to match set up with an AI in offline mode. NOTE: Not 
     * implemented in this deliverable.
     * @param evt The event of the offline button being clicked.
     */
    private void offlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offlineButtonActionPerformed
        this.controller.swapLoginWithMatchMaking();
        //offline option menu
    }//GEN-LAST:event_offlineButtonActionPerformed

    /**
     * Takes the user to the register view. A connection check is also performed
     * at this stage to determine whether the user is connected to the server.
     * @param evt The event of the register button being clicked.
     */
    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        if(controller.getConnectionCheck() == true){
            this.controller.swapLoginWithRegister();
        }
        else{
            connectionWarning.setVisible(true);
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectionWarning;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton offlineButton;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JButton registerButton;
    private javax.swing.JTextField usernameInput;
    private javax.swing.JLabel warningMessage;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets the current value in the username text field.
     * @return the string value in the username text field.
     */
    public String getUsername(){
        return usernameInput.getText();
    }
    /**
     * Gets the current value in the password text field.
     * @return the string value in the password text field as a character array
     */
    public char[] getPassword(){
        return passwordInput.getPassword();
    }
    /**
     * Sets the controller for the Login View
     * @param controller The Login Controller for the Login View.
     */
    public void setController(LoginController controller){
        this.controller = controller;
    }

    /**
     * Clears the username and password text fields of any information currently
     * in them.
     */
    public void reset(){
        usernameInput.setText("");
        passwordInput.setText("");
        connectionWarning.setVisible(false);
        warningMessage.setVisible(false);
    }
    /**
     * Sets the login warning message to be visible when an invalid login 
     * attempt is made.
     */
    public void invalidLoginResult(){
        this.warningMessage.setVisible(true);
    }
    
}
