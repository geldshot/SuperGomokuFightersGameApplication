package supergomokutest;



import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListSelectionModel;

/*
 * Team SprGmkft
 * MatchMaking
 * ClientMain
 * CSCE320 Spring
 * 4-25-12
 * Java 7 with the most recent Java Compiler
 * Java API documentation, Dr. Hauser
 * Revision #3: Added methods for dealing with inviting another user to play a 
 * game of Gomoku. Implemented the Invite, Refresh and Logout Button. Currently
 * the invite button will allow for multiple invitations to be sent however this
 * is not the intended feature of this button and future imeplementations will 
 * disable the button until a response has been received from the server about 
 * the status of the first invite. The Refresh Button will send a message that 
 * pulls the updated list of online users and update the list in the lobby view.
 * The Logout Button will take the user back to the login view of the 
 * application and send a "bye" message to the server which will destroy the 
 * current ServerThread associated with that username.
 */

/**
 * MatchMakingView that shows the list of online players. Also allows the user 
 * to invite another online user to the a game. The user can also logout from
 * this view.
 * @author Austin Williams
 */
public class MatchMakingView extends javax.swing.JPanel {
    private MatchMakingController controller;
    
    /**
     * Creates new form MatchMakingView. Sets the warning message to false. Also
     * sets the selection mode, layout orientation and visible row count for the
     * List of online players.
     */
    public MatchMakingView() {
        initComponents();
        warningMessage.setVisible(false);
        availablePlayersList.setSelectionMode(
                ListSelectionModel.SINGLE_SELECTION);
        availablePlayersList.setLayoutOrientation(JList.VERTICAL);
        availablePlayersList.setVisibleRowCount(10);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logoutButton = new javax.swing.JButton();
        invitePlayerButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        warningMessage = new javax.swing.JLabel();
        availablePlayersTA = new javax.swing.JScrollPane();
        availablePlayersList = new javax.swing.JList();
        refreshButton = new javax.swing.JButton();

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        invitePlayerButton.setText("Invite");
        invitePlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Available Players");

        warningMessage.setForeground(new java.awt.Color(200, 0, 0));
        warningMessage.setText("Please Select a User to Invite");

        availablePlayersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        availablePlayersTA.setViewportView(availablePlayersList);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(availablePlayersTA, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(warningMessage))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(invitePlayerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(warningMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(invitePlayerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoutButton))
                    .addComponent(availablePlayersTA, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * ActionListener for the Logout Button. Takes the user back to the login 
     * view. Does not completely exit the program. 
     * @param evt The event of the button being clicked.
     */
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        boolean logoutChecker = true;
        if(logoutChecker == true){
            this.controller.sendMessage("bye\n");
            this.controller.logoutButtonHandler(0);
        }
        
    }//GEN-LAST:event_logoutButtonActionPerformed

    /**
     * ActionListener for the Invite Button. Sends an invite to another user 
     * through the server to play a game of Gomoku. 
     * @param evt The event of the button being clicked.
     */
    private void inviteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteButtonActionPerformed
        String name;
        name = (String) availablePlayersList.getSelectedValue();
        if(name == null){
            warningMessage.setVisible(true);
        }else{
            this.setInviteButtonEnableDisable(false);
            this.controller.inviteButtonHandler("invite:" + name + "\n");
        }
        
    }//GEN-LAST:event_inviteButtonActionPerformed
    /**
     * ActionListener for the Refresh Button. Sends a message to the Server to
     * send an updated list of online users.
     * @param evt The event of the button being clicked.
     */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        this.controller.refreshButtonHandler("M\n");
        
    }//GEN-LAST:event_refreshButtonActionPerformed
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList availablePlayersList;
    private javax.swing.JScrollPane availablePlayersTA;
    private javax.swing.JButton invitePlayerButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel warningMessage;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the controller for the MatchMakingView. Controller relays messages
     * between the View and its model.
     * @param matchController The MatchMakingController for the view.
     */
    public void setController(MatchMakingController matchController) {
        this.controller = matchController;
    }
    /**
     * Posts the list of online players to the available players text area.
     * @param message The list of online players from the server as a string.
     */
    public void postList(String message){
        
        DefaultListModel model = new DefaultListModel();
        String newName = "";
        String[] pieces = message.split(":");
        for(int i = 0; i < pieces.length; i++){
            newName = pieces[i];
            model.addElement(newName);
            System.out.println(model.get(i));
        }
        availablePlayersList.setModel(model);
    }
    /**
     * Resets the invite warning to not be visible. THe warning is called when 
     * the invite button is clicked but the user hasn't selected another user to
     * invite to a game.
     */
    public void resetWarning(){
        warningMessage.setVisible(false);
    }
    
    public void setInviteButtonEnableDisable(boolean flag){
        this.invitePlayerButton.setEnabled(flag);
    }
}
