package supergomokutest;

import javax.swing.JFrame;

/*
 * Team SprGmkft
 * MatchMaking
 * ClientMain
 * CSCE320 Spring
 * 4-25-12
 * Java 7 with the most recent Java Compiler
 * Java API documentation, Dr. Hauser
 * Revision #3: Nothing major was added for this deliverable 
 * except the error message handling method.
 */


/**
 * View to register a new user in the Server. Asks the user to input a username
 * and password. Has a second password field for redundancy. 
 * @author Austin Williams
 */
public class RegisterView extends javax.swing.JPanel {
    private RegisterController controller;
    JFrame frame;

    /**
     * Creates new form RegisterView
     */
    public RegisterView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        passwordInput = new javax.swing.JPasswordField();
        redunPasswordInput = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        registerWarningMessage = new javax.swing.JLabel();

        jLabel1.setText("Register New User");

        jLabel2.setText("Username");

        usernameInput.setText("Enter Username");

        jLabel3.setText("Password");

        jLabel4.setText("Confirm Password");

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("(Between 6 and 16 Characters)");

        registerWarningMessage.setForeground(new java.awt.Color(200, 0, 0));
        registerWarningMessage.setText("Invalid Username length. Please try again.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(registerButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(backButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(redunPasswordInput, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(passwordInput, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(usernameInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(87, 87, 87))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(registerWarningMessage)
                        .addGap(0, 65, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redunPasswordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(registerWarningMessage)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerButton)
                    .addComponent(backButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sends the new username and password to be validated on the Server. If the
     * username is not already in use already, the user will be registered with
     * that username and password on the server. Also performs a check between
     * the redundant password field and the password field to make sure they are
     * the same. If they are a message is shown to the user to make sure they 
     * are both the same before continuing. Both password fields are reset to 
     * blank when this happens.
     * @param evt The event of the register button being clicked.
     */
    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        boolean checkOne = true;
        boolean checkTwo = true;
        if(this.getUsername().length() > 16 || this.getUsername().length() < 6){
            checkTwo = false;
            this.registerWarningMessage.setText("Invalid Username length. Please"
                    + " try again.");
            this.registerWarningMessage.setVisible(true);
        }
        for(int i = 0; i < this.getPassword().length; i++){
            // checks each character of both the password fields to make sure 
            // they are the same.
            if(this.getPassword()[i] != 
                    this.getRedunPassword()[i] || 
                    this.getPassword().length != 
                    this.getRedunPassword().length){
                this.registerWarningMessage.setText("Make sure both Password "
                        + "Fields match. Please try again.");
                this.registerWarningMessage.setVisible(true);
            this.clearPassword();
            this.clearRedunPassword();
            checkOne = false;
            }
            
        }//for loop
        if(checkOne != false && checkTwo != false){
            controller.storeUserName(this.getUsername());
            controller.sendMessage("R:" + this.getUsername() + 
                    ":" + new String(this.getPassword()) + "\n");
        }
        
    }//GEN-LAST:event_registerButtonActionPerformed

    /**
     * Handles the event of the back button being clicked. Sends a message to 
     * the model through the register controller to swap the register view with
     * the first login view.
     * @param evt The event of the back button being clicked.
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.controller.backButtonHandler(0);
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JPasswordField redunPasswordInput;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel registerWarningMessage;
    private javax.swing.JTextField usernameInput;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Returns the text from the password text field.
     * @return the string value of the password as a character array.
     */
    public char[] getPassword(){
        return passwordInput.getPassword();
    }
    /**
     * Returns the text from the redundant password text field.
     * @return the string value of the redundant password as a character array.
     */
    public char[] getRedunPassword(){
        return redunPasswordInput.getPassword();
    }
    
    /**
     * Clears the Username Text Field of any input that is currently 
     * in the text field.
     */
    public void clearUsername(){
        usernameInput.setText("");
    }
    
    /**
     * Clears the Password Text Field of any input that is currently 
     * in the text field.
     */
    public void clearPassword(){
        passwordInput.setText("");
    }
    /**
     * Clears the Redundant Password Text Field of any input that is currently 
     * in the text field.
     */
    public void clearRedunPassword(){
        redunPasswordInput.setText("");
    }
    
    /**
     * Returns the text from the userInput text field.
     * @return the username.
     */
    public String getUsername(){
        return usernameInput.getText();
    }

    /**
     * Sets the controller that controls the view.
     * @param control the controller.
     */
    public void setController(RegisterController control){
        this.controller = control;
    }

    /**
     * Clears the username, password, and redundant password text fields of any
     * information currently in them.
     */
    public void reset() {
        this.clearUsername();
        this.clearPassword();
        this.clearRedunPassword();
        this.registerWarningMessage.setVisible(false);
    }

    /**
     * Error Message that occurs when registering an invalid or already in use 
     * username.
     */
    public void invalidRegisterResult() {
        this.registerWarningMessage.setText("Register Failed. Please try "
                + "again.");
    }

}
